/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.experiment.avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExperimentalParams extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"ExperimentalParams\",\"namespace\":\"mil.nga.giat.geowave.experiment.avro\",\"fields\":[{\"name\":\"num_data\",\"type\":[\"long\",\"null\"],\"doc\":\"how many records should be generated from this one\"},{\"name\":\"id\",\"type\":[\"long\",\"null\"],\"doc\":\"my id\"}],\"doc:\":\"Generates 4D records\"}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	/** how many records should be generated from this one */
	@Deprecated
	public java.lang.Long num_data;
	/** my id */
	@Deprecated
	public java.lang.Long id;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public ExperimentalParams() {}

	/**
	 * All-args constructor.
	 */
	public ExperimentalParams(
			java.lang.Long num_data,
			java.lang.Long id ) {
		this.num_data = num_data;
		this.id = id;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return num_data;
			case 1:
				return id;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				num_data = (java.lang.Long) value$;
				break;
			case 1:
				id = (java.lang.Long) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'num_data' field. how many records should be
	 * generated from this one
	 */
	public java.lang.Long getNumData() {
		return num_data;
	}

	/**
	 * Sets the value of the 'num_data' field. how many records should be
	 * generated from this one * @param value the value to set.
	 */
	public void setNumData(
			java.lang.Long value ) {
		this.num_data = value;
	}

	/**
	 * Gets the value of the 'id' field. my id
	 */
	public java.lang.Long getId() {
		return id;
	}

	/**
	 * Sets the value of the 'id' field. my id * @param value the value to set.
	 */
	public void setId(
			java.lang.Long value ) {
		this.id = value;
	}

	/** Creates a new ExperimentalParams RecordBuilder */
	public static mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder newBuilder() {
		return new mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder();
	}

	/**
	 * Creates a new ExperimentalParams RecordBuilder by copying an existing
	 * Builder
	 */
	public static mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder newBuilder(
			mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder other ) {
		return new mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder(
				other);
	}

	/**
	 * Creates a new ExperimentalParams RecordBuilder by copying an existing
	 * ExperimentalParams instance
	 */
	public static mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder newBuilder(
			mil.nga.giat.geowave.experiment.avro.ExperimentalParams other ) {
		return new mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder(
				other);
	}

	/**
	 * RecordBuilder for ExperimentalParams instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<ExperimentalParams> implements
			org.apache.avro.data.RecordBuilder<ExperimentalParams>
	{

		private java.lang.Long num_data;
		private java.lang.Long id;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.experiment.avro.ExperimentalParams.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.num_data)) {
				this.num_data = data().deepCopy(
						fields()[0].schema(),
						other.num_data);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.id)) {
				this.id = data().deepCopy(
						fields()[1].schema(),
						other.id);
				fieldSetFlags()[1] = true;
			}
		}

		/** Creates a Builder by copying an existing ExperimentalParams instance */
		private Builder(
				mil.nga.giat.geowave.experiment.avro.ExperimentalParams other ) {
			super(
					mil.nga.giat.geowave.experiment.avro.ExperimentalParams.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.num_data)) {
				this.num_data = data().deepCopy(
						fields()[0].schema(),
						other.num_data);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.id)) {
				this.id = data().deepCopy(
						fields()[1].schema(),
						other.id);
				fieldSetFlags()[1] = true;
			}
		}

		/** Gets the value of the 'num_data' field */
		public java.lang.Long getNumData() {
			return num_data;
		}

		/** Sets the value of the 'num_data' field */
		public mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder setNumData(
				java.lang.Long value ) {
			validate(
					fields()[0],
					value);
			this.num_data = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'num_data' field has been set */
		public boolean hasNumData() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'num_data' field */
		public mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder clearNumData() {
			num_data = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'id' field */
		public java.lang.Long getId() {
			return id;
		}

		/** Sets the value of the 'id' field */
		public mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder setId(
				java.lang.Long value ) {
			validate(
					fields()[1],
					value);
			this.id = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'id' field has been set */
		public boolean hasId() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'id' field */
		public mil.nga.giat.geowave.experiment.avro.ExperimentalParams.Builder clearId() {
			id = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		@Override
		public ExperimentalParams build() {
			try {
				ExperimentalParams record = new ExperimentalParams();
				record.num_data = fieldSetFlags()[0] ? this.num_data : (java.lang.Long) defaultValue(fields()[0]);
				record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
